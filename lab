from tokenize import Double
import pygame as pygame
import random as random
import numpy as np

from pygame.locals import *
from OpenGL.GL import *
from OpenGL.GLU import *


class point:
    x: float
    y: float
    z: float

    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z


def wood(p1: point, p2: point, scale):
    width = p2.x - p1.x
    height = p2.y - p1.y
    depth = p2.z - p1.z
    width *= scale
    height *= scale
    depth *= scale

    glBegin(GL_QUADS)
    glVertex3f(p1.x * scale, p1.y * scale, p1.z * scale)
    glVertex3f(p1.x * scale + width, p1.y * scale, p1.z * scale)
    glVertex3f(p1.x * scale + width, p1.y * scale + height, p1.z * scale)
    glVertex3f(p1.x * scale, p1.y * scale + height, p1.z * scale)

    glEnd()

    glPolygonMode(GL_FRONT_AND_BACK, GL_FILL)
    glBegin(GL_QUADS)
    glVertex3f(p1.x * scale, p1.y * scale, p1.z * scale)
    glVertex3f(p1.x * scale + width, p1.y * scale, p1.z * scale)
    glVertex3f(p1.x * scale + width, p1.y * scale, p1.z * scale + depth/2)
    glVertex3f(p1.x * scale, p1.y * scale, p1.z * scale + depth/2)
    glEnd()

    glPolygonMode(GL_FRONT_AND_BACK, GL_FILL)
    glBegin(GL_QUADS)
    glVertex3f(p1.x * scale, p1.y * scale, p1.z * scale)
    glVertex3f(p1.x * scale, p1.y * scale + height, p1.z * scale)
    glVertex3f(p1.x * scale, p1.y * scale + height, p1.z * scale + depth/2)
    glVertex3f(p1.x * scale, p1.y * scale, p1.z * scale + depth/2)
    glEnd()

    glPolygonMode(GL_FRONT_AND_BACK, GL_FILL)
    glBegin(GL_QUADS)
    glVertex3f(p1.x * scale + width, p1.y * scale + height, p1.z * scale + depth/2)
    glVertex3f(p1.x * scale, p1.y * scale + height, p1.z * scale + depth/2)
    glVertex3f(p1.x * scale, p1.y * scale, p1.z * scale + depth/2)
    glVertex3f(p1.x * scale + width, p1.y * scale, p1.z * scale + depth/2)
    glEnd()

    glPolygonMode(GL_FRONT_AND_BACK, GL_FILL)
    glBegin(GL_QUADS)
    glVertex3f(p1.x * scale + width, p1.y * scale + height, p1.z * scale + depth/2)
    glVertex3f(p1.x * scale, p1.y * scale + height, p1.z * scale + depth/2)
    glVertex3f(p1.x * scale, p1.y * scale + height, p1.z * scale)
    glVertex3f(p1.x * scale + width, p1.y * scale + height, p1.z * scale)
    glEnd()

    glPolygonMode(GL_FRONT_AND_BACK, GL_FILL)
    glBegin(GL_QUADS)
    glVertex3f(p1.x * scale + width, p1.y * scale + height, p1.z * scale + depth/2)
    glVertex3f(p1.x * scale + width, p1.y * scale, p1.z * scale + depth/2)
    glVertex3f(p1.x * scale + width, p1.y * scale, p1.z * scale)
    glVertex3f(p1.x * scale + width, p1.y * scale + height, p1.z * scale)

    glEnd()


def triangle(h: float, k: float, offset: float, scale: float, zet: float):
    d = 2 * k * scale
    ze = zet*scale

    glBegin(GL_TRIANGLES)
    glVertex3f(0, offset * scale, 0+ze)
    glVertex3f(k * scale, (offset - h) * scale, 0+ze)
    glVertex3f(-k * scale, (offset - h) * scale, 0+ze)
    glEnd()

    glBegin(GL_TRIANGLES)
    glVertex3f(0, offset * scale, -d+ze)
    glVertex3f(k * scale, (offset - h) * scale, -d+ze)
    glVertex3f(-k * scale, (offset - h) * scale, -d+ze)
    glEnd()

    glColor3fv((0, 0.75, 0))
    glBegin(GL_QUADS)
    glVertex3f(-k * scale, (offset - h) * scale, 0+ze)
    glVertex3f(k * scale, (offset - h) * scale, 0+ze)
    glVertex3f(k * scale, (offset - h) * scale, -d+ze)
    glVertex3f(-k * scale, (offset - h) * scale, -d+ze)
    glEnd()


    glBegin(GL_QUADS)
    glVertex3f(k * scale, (offset - h) * scale, 0+ze)
    glVertex3f(0, offset * scale, 0+ze)
    glVertex3f(0, offset * scale, -d+ze)
    glVertex3f(k * scale, (offset - h) * scale, -d+ze)
    glEnd()


    glBegin(GL_QUADS)
    glVertex3f(-k * scale, (offset - h) * scale, 0+ze)
    glVertex3f(0, offset * scale, 0+ze)
    glVertex3f(0, offset * scale, -d+ze)
    glVertex3f(-k * scale, (offset - h) * scale, -d+ze)
    glEnd()


def main():
    scale = 1.0 / 16.0

    pygame.init()
    display = (800, 600)
    pygame.display.set_mode(display, DOUBLEBUF | OPENGL)
    gluPerspective(45, (display[0] / display[1]), scale * 2, 100)

    glTranslatef(scale * -2.5, scale * -2.5, -2)
    glEnable(GL_DEPTH_TEST)

    while True:
        keys = pygame.key.get_pressed()

        glTranslatef(scale * 2.5, scale * 2.5, 0)
        if keys[K_LEFT]:
            glRotate(-0.2, 0, 0, 1)
        if keys[K_RIGHT]:
            glRotate(0.2, 0, 0, 1)
        if keys[K_UP]:
            glRotate(-0.2, 1, 0, 0)
        if keys[K_DOWN]:
            glRotate(0.2, 1, 0, 0)
        if keys[K_a]:
            glRotate(-0.2, 0, 1, 0)
        if keys[K_d]:
            glRotate(0.2, 0, 1, 0)
        glTranslatef(scale * -2.5, scale * -2.5, 0)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()

        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

        glRotate(0, 0, 0, 0)

        glColor3f(0.5,0.25,0)
        wood(point(-0.5,-2,-1.5), point(0.5,-1,0), 0.15)
        glColor3fv((0, 1, 0))
        triangle(1, 1, 0, 0.2, 0)
        glColor3fv((0, 1, 0))
        triangle(1, 1, 0.75, 0.2, 0)
        glColor3fv((0, 1, 0))
        triangle(1, 1, 1.5, 0.2, 0)

        glColor3f(1, 0.25, 0)
        wood(point(-0.5,1,0.1), point(0,1.5,-0.5), 0.15)

        glColor3f(1, 0.25, 0)
        wood(point(0,0,0.1), point(0.5,0.5,-0.5), 0.15)

        glColor3f(1, 0.25, 0)
        wood(point(-0.7,-0.5,0.1), point(-0.2,-1,-0.5), 0.15)



        glColor3f(1, 0.25, 0)
        wood(point(-0.5,1,-2), point(0,1.5,-3.5), 0.15)

        glColor3f(1, 0.25, 0)
        wood(point(0,0,-2), point(0.5,0.5,-3.5), 0.15)

        glColor3f(1, 0.25, 0)
        wood(point(-0.7,-0.5,-2), point(-0.2,-1,-3.5), 0.15)

        glColor3f(1, 0.75, 0)
        triangle(-0.75, 1, 3, 0.1, -1)

        glColor3f(1, 0.75, 0)
        triangle(0.75, 1, 4, 0.1, -1)
        pygame.display.flip()
        pygame.time.wait(1)


main()
